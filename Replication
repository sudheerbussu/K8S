ReplicationController:
This is an high level object used for handling multiple replicas of a specific pod. Here we can perform load balancing and scalling.

ReplicationController uses keys like replicas, template" etc in the "spec" section.

In template section we can give metadata related to the pod and also use another spec section where we can give containers information.

Ex: Create  a replication controller for creating 3 replicas of httpd



vim  replication-controller.yml


---
apiVersion: v1
kind: ReplicationController
metadata:
 name: httpd-rc
 labels:
  author: durgasoft
spec:
 replicas: 3
 template:
  metadata:
   name: httpd-pod
   labels:
    author: sunil
  spec:
   containers:
    - name: myhttpd
      image: httpd
      ports:
       - containerPort: 80
         hostPort: 8080


:wq


kubectl delete --all pods   ( To delete all the existing pods )

kubectl  get pods  ( No pods available )

Open the port
-------------------
gcloud compute firewall-rules create rule1 --allow tcp:8080

kubectl create -f replication-controller.yml

kubectl  get pods  ( We should get 3 pods )

kubectl  get pods -o wide ( Observation , 3 pods are distributed in 3 nodes )

kubectl  get nodes -o wide


Take external IP ( Public IP )  of any node
34.122.234.70:8080

35.224.34.249:8080

To delete the replicas
kubectl delete -f replication-controller.yml


++++++++++++++++++++++++++
ReplicaSet
---------------

Pod is the smallest kubernetes object, which we worked on.
Next Level is replication controller.
ReplicaSet is similar to replication controller.
In replicatSet, we have an additional field in spec section called as "selector" field.

This selector uses a child element called "matchLabels"   , where it will search for pods based on a 
specific label name, and adds them to the cluster.

Ex: Create a replicaset file to start 4 tomcat replicas and then perform scaling  

vim replica-set.yml



---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: tomcat-rs
 labels:
  type: webserver
  author: sunil
spec:
 replicas: 4
 selector:
  matchLabels:
   type: webserver
 template:
  metadata:
   name: tomcat-pod
   labels:
    type: webserver
  spec:
   containers:
    - name: mywebserver
      image: tomcat
      ports:
       - containerPort: 8080
         hostPort: 9090

 
:wq


kubectl create -f replica-set.yml


kubectl  get pods  ( We should get 4 pods )

kubectl  get replicaset

Lets perform scaling from 4 pods to 6 pods

Option 1: We can open the definition file and make changes in the code from 4 to 6 in replicas field.

vim replica-set.yml

Now, we should not use create commands, we should use replace command.

kubectl replace -f replica-set.yml

kubectl  get pods  ( We should get 6 pods )

Option 2: 

kubectl scale --replicas=2 -f replica-set.yml

kubectl  get pods  ( We should get 2 pods )

 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Deployment Object
-------------------------
This is also an high level object which can be used for scalling, load balancing and perform rolling updates.

Create a deployment file to run nginx 1.7.9 with 3 replicas. 
Later perform a rolling update to nginx 1.9.1 


vim deployment.yml
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-deployment
 labels:
  author: sunil
  type: proxyserver
spec:
 replicas: 3
 selector:
  matchLabels:
   type: proxyserver
 template:
  metadata:
   name: nginx-pod
   labels:
    type: proxyserver
  spec:
   containers:
    - name: nginx
      image: nginx:1.7.9
      ports:
       - containerPort: 80
         hostPort: 8888
 

:wq

kubectl get all  ( we have one   default service running )

kubectl create -f deployment.yml

TO check, if the deployment is created or not
--------------------------------------------
kubectl get deployment ( we can see 1 deployment object )




kubectl get pods  ( we should get 3 pods )



We can anyways perform scaling, apart from that we can perform rolling updates.

kubectl get all  (  we get all the objects )
Take a note of the full name of the deployment object

 
deployment.apps/nginx-deployment

To perform rolling update
-----------------------------

kubectl --record deployment.apps/nginx-deployment  set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1

We get a message ( image updated )

kubectl get pods
To know more about pod
------------------------
kubectl describe pods podname

nginx-deployment-c4b555f7f-6v78w
nginx-deployment-59bcb58465-d5x6p

kubectl describe pods nginx-deployment-59bcb58465-d5x6p | less

we can see as Image: nginx:1.9.1


:q
( It will take some time )

kubectl  get pods

++++++++++++++++++++++++++++++++++++++++++++

Kompose
------------
This is used to implement docker compose  to create a multi-container in architecture in Kubernetes.


docker compose + kubernetes = kompose


Installing Kompose
------------------------

Connect to cluster


Setup
-----------

Step 1: Download Kompose
curl -L https://github.com/kubernetes/kompose/releases/download/v1.18.0/kompose-linux-amd64 -o kompose

Step 2: Give execute permissions
chmod +x kompose

Step 3: Move it to PATH
sudo mv ./kompose /usr/local/bin/kompose

Step 4: To check if the installation is successfull
kompose version



https://www.digitalocean.com/community/tutorials/how-to-migrate-a-docker-compose-workflow-to-kubernetes

--------
cd newfiles



vim docker-compose.yml  
---
version: '3'
services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: sunil

 wordpress:
  image: wordpress
  ports:
   - 8080:80

  deploy:
   replicas: 3
...   

:wq


TO start the services
kompose up

( To remove the services
kompose down   )

kubectl  get all  ( will give all the components )
or
kubectl  get pods -o wide   ( we 3 wordpress ports, 1 mydb ports)

kubectl get nodes -o wide ( take a note po external IP )
35.202.128.237

35.202.128.237:8080  ( we may not get the wordpress application)


Hence, we need to create service Object.
